CHAPTER 4：调试技术

===============================================================================
printk：
使用一些宏，将消息划分成不同的优先级。这些宏将展开成字符串并与消息字符串连接起来，因此它们和消息之间不要加逗号。
<linux/kernel.h>
KERN_EMERG：Emergency messages，紧急信息，将会导致系统崩溃的信息。
KERN_ALERT： 需要立即引起注意的信息。
KERN_CRIT：Critical conditions, 临界条件，通常是一些硬件或者软件的严重错误。
KERN_ERR：错误，驱动程序通常用它来报告一些硬件的问题。
KERN_WARNING：警告，用于报告一些可能导致出现问题的事件。
KERN_NOTICE：一些值得注意的普通事件。
KERN_INFO：驱动通常用这个来报告一些硬件信息。
KERN_DEBUG：调试信息。

这些宏的值是尖括号中放一个0-7的字符串，入<0>，0的优先级最高。
如果不加这些宏的话默认是DEFAULT_MESSAGE_LOGLEVEL，它定义在kernel/printk.c中，2.6中它的值是KERN_WARNING。

根据日志的级别，内核可能会将它打印到当前控制台、终端、串口等。具体是，整数值小于console_loglevel的会被打印。
如果系统运行了klogd或者syslogd。内核信息会被输出到/var/logmessages（根据syslogd的配置）
如果klogd在运行，信心不会到达用户层，除非你去读/proc/kmsg（可以使用dmesg命令）
变量console_loglevel一般初始化为DEFAULT_MESSAGE_LOGLEVEL，可以通过sys_syslog来修改它。
也可以通过修改/proc/sys/kernel/printk,例如可以输入以下命令来使内核打印所有信息：
# echo 8 > /proc/sys/kernel/printk

===============================================================================
打开或关闭调试信息 

在正式发布时代码中用于调试的打印函数需要移除，我们可以设计：
1、使用一个宏来打开或者关闭这些信息。
2、在编译时可以通过修改CFLAG来关闭所有的调试信息
3、同一个打印语句既可以在内核层、也可以在用户层使用。

我们可以在头文件中做如下定义：
#undef PDEBUG                        /* undef it, just in case */

#ifdef SCULL_DEBUG
#		ifdef __KERNEL__                /* This one if debugging is on, and kernel space */
#			define PDEBUG(fmt, args...) printk( KERN_DEBUG "scull: " fmt, ## args)
# 		else                                      /* This one for user space */
#			define PDEBUG(fmt, args...) fprintf(stderr, fmt, ## args)
# 		endif
#else
# 		define PDEBUG(fmt, args...) /* not debugging: nothing */
#endif

#undef PDEBUGG
#define PDEBUGG(fmt, args...) /* nothing: it's a placeholder */


然后再在Makefile中利用CFLAG的-D选项来控制是否定义SCULL_DEBUG宏等。
===============================================================================
控制信息的打印速率：

如果不小心，printk可能会打印成百上千的调试信息（死循环之类的）。对于一些慢速的控制台，比如终端。可能会导致系统无响应。
内核提供了一个函数：
int printk_ratelimit(void); 
通常像以下这样使用它：如果它返回非0，则可以继续打印信息。
这个函数会检测需要输出到控制台的信息，如果输出的速度超过一个阀值，它会一直返回0
if (printk_ratelimit( ))
	printk(KERN_NOTICE "The printer is still on fire\n");

可以通过修改/proc/sys/kernel/printk_ratelimit（隔多少秒可以继续接收消息）
和/proc/sys/kernel/printk_ratelimit_burst（注：大概是下一次限制之前可以接收多少条消息？）
来定制printk_ratelimit的行为。

printk在遇到换行符前不会主动刷新缓冲？？！！（that printk doesn’t flush until a trailing newline is provided.）

===============================================================================
打印设备号等信息：

使用定义在linux/kdev_t.h中的宏：
int print_dev_t(char *buffer, dev_t dev);
char *format_dev_t(char *buffer, dev_t dev);
它们功能一致，只是下面这个返回的是指向buff的指针，可以直接放在printk中。

===============================================================================
通过查看信息来调试：

大量的使用printk会显著的导致系统变慢，即使将console_loglevel调得更小也如此。因为像syslogd这样的进程需要时刻将数据同步
到磁盘，以免系统崩溃而信息丢失（磁盘操作是费时的）。

时常，最好的办法是通过询问系统来获取想要知道的信息。可以通过很多方式获得系统信息，例如：ps netstat vmstat 等等。
还有一种办法就是在/proc文件系统中创建一个文件，利用驱动中的ioctl函数，经sysfs导出一些属性。sysfs在14章讨论。

===============================================================================
使用/proc文件系统：

proc文件是由软件创建的，用来输出一些内核信息。
很多实用程序都是通过/proc来获取信息，例如ps top uptime等。一些驱动程序也经/proc输出信息，同样你也可以这样做。
/proc文件是动态的，所以可以在任何时候添加和移除。


...







